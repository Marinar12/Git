Процесс работы в git

1.Клонирование репозитория: 
Создается локальная копия удаленного репозитория, включая всю историю и ветки проекта. Это делается с помощью команды git clone.

2.Создание новой ветки: 
Перед внесением изменений рекомендуется создать новую ветку командой git branch <branch_name>. Это позволяет разработчикам работать изолированно от главной линии разработки (обычно ветка master или main).

3.Переключение между ветками: 
Для начала работы в новой ветке используется команда git checkout <branch_name>. Это изменяет рабочую копию файлов на те, что соответствуют состоянию выбранной ветки.

4.Добавление изменений: 
После внесения изменений в файлы они добавляются в индекс с помощью команды git add. Это подготавливает измененные файлы к коммиту.

5.Совершение коммита: 
Подготовленные изменения фиксируются в истории репозитория с помощью команды git commit. Каждый коммит требует сообщения, описывающего сделанные изменения.

6.Отправка изменений: 
Чтобы поделиться изменениями с другими, коммиты из локальной ветки отправляются в удаленный репозиторий командой git push.

7.Слияние веток: 
После завершения работы в ветке её изменения можно объединить с главной веткой (например, main). Это обычно делается через запрос на слияние (pull request) в веб-интерфейсе сервиса (например, GitHub) или командой git merge в командной строке.

8.Решение конфликтов: 
Если одни и те же части кода были изменены в разных ветках, Git может не суметь автоматически слить их. В этом случае разработчику потребуется вручную разрешить конфликты и выполнить коммит этих изменений.

9.Обновление локального репозитория: 
Регулярно рекомендуется обновлять локальный репозиторий, чтобы он соответствовал удаленному. Для этого используется команда git pull.


Установка и настройка git и github

1. git config
Команда git config используется для настройки параметров Git на уровне конкретного репозитория, пользователя или всей системы. Эти настройки контролируют поведение Git, включая такие вещи, как имя пользователя, адрес электронной почты, форматирование вывода, цвет командной строки и многое другое.
Настройка имени пользователя и электронной почты:

Одна из первых задач, которую обычно выполняют с помощью git config, — это настройка имени пользователя и адреса электронной почты. Это важно, поскольку каждый Git коммит использует эту информацию, и она включена в коммиты, которые вы отправляете.
Команды:

Установка имени пользователя:

git config --global user.name "Your Name"
Пример: git config --global user.name "John Doe"
Эта команда устанавливает имя, которое будет прикреплено к вашим коммитам и тегам.
Установка адреса электронной почты:

git config --global user.email "your_email@example.com"
Пример: git config --global user.email "johndoe@example.com"
Этот адрес электронной почты будет использоваться в информации о коммите.

2. git init
Используется для инициализации нового Git репозитория в существующем каталоге. Это первый шаг в создании нового проекта под управлением Git.
Команда: git init
После выполнения, в текущем каталоге создается подкаталог .git, содержащий все необходимые файлы репозитория — скелет нового Git репозитория.

3. git clone
Служит для клонирования репозитория с удаленного репозитория. Эта команда создает полную копию всех данных репозитория, включая всю историю и ветки.
Команда: git clone [url]
Пример: git clone https://github.com/example/repo.git
Выполнение этой команды создаст каталог repo с подкаталогом .git, скопирует все данные репозитория и установит текущую рабочую копию в последнюю версию.

4. git status
Показывает состояние изменений как индексированных, так и неиндексированных. Это помогает понять, какие изменения были сделаны и какие из них будут включены в следующий коммит.
Команда: git status
Вызов этой команды отобразит список измененных файлов, а также файлов, которые готовы к коммиту (после использования git add).

5. git add
Добавляет изменения в файлах в индекс (подготовка к коммиту). Можно добавлять отдельные файлы или все изменения сразу.
Команда: git add [file] или git add . для добавления всех изменений.
Пример: git add index.html добавит изменения только для файла index.html.

6. git commit
Коммитит подготовленные изменения и сохраняет их в истории репозитория. Каждый коммит требует сообщения, которое описывает совершенные изменения.
Команда: git commit -m "commit message"
Пример: git commit -m "Add feature X"
Это создает новый снимок текущего состояния проекта, который можно потом восстановить или на который можно ссылаться.

7. git push
Отправляет локальные коммиты на удаленный репозиторий. Это позволяет поделиться своей работой с другими.
Команда: git push [alias] [branch]
Пример: git push origin main
Эта команда отправит изменения из локальной ветки main в удаленный репозиторий, связанный с алиасом origin.

Базовые команды git. Отслеживание изменений

1. git fetch
Команда git fetch скачивает коммиты, файлы и ссылки из удаленного репозитория в ваш локальный репозиторий.
Команда: git fetch [remote-name]
Пример: git fetch origin
git fetch обновляет локальную информацию о состоянии удаленного репозитория, но не влияет на вашу рабочую директорию.

2. git pull
Команда git pull используется для получения и слияния любых изменений с удаленного репозитория в текущую ветку в локальной рабочей директории.
Команда: git pull [remote-name] [branch-name]
Пример: git pull origin master
git pull является комбинацией команд git fetch и git merge, обновляя текущую локальную ветку до последней версии на удаленном сервере.

3. git show
Команда git show отображает информацию о любом git объекте, например коммите или теге, вместе с соответствующими изменениями.
Команда: git show [commit-hash]
Пример: git show 1a410efbd13591db07496601ebc7a059dd55cfe9
По умолчанию git show отображает информацию о последнем коммите, если не указан конкретный объект.

4. git log
Команда git log используется для просмотра истории коммитов в текущей ветке.
Команда: git log
Дополнительные опции могут быть использованы для настройки вывода, например, --oneline для сокращенного представления или --graph для визуального представления ветвления.

5. git blame
Команда git blame показывает, кто и когда внес изменения в каждую строку файла.
Команда: git blame [file-name]
Пример: git blame README.md
Это полезно для отслеживания истории изменений и выяснения авторства кода.

6. git diff
Команда git diff используется для сравнения изменений между коммитами, ветками, файлами и т.д.
Команда: git diff [branch1]..[branch2]
Пример: git diff master..feature
Это позволяет увидеть различия в коде между разными состояниями репозитория.